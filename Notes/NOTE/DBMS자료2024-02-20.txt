DBMS 수업(2024/02/20)

===================자료 정리=====================
Ctrl + Shift + Enter 한번에 실행시키기

========================================
DESC
- 해당 테이블에 있는 모든 Colum 상세 정보를 보는 명령어

========================================
concat()함수
- 괄호 안에 있는 여러 단어나 텍스트를 1 개의 문장으로 합치는 역활

========================================
distinct => 중복된 값을 제거하고 출력
select 명령어 뒤에 distinct 키워드를 함께 사용하면 중복값이 제거되어 출력
* 반드시 select 구문 뒤에 맨 먼저 써야한다
* select 뒤에 있는 모든 컬럼에 영향력이 적용됨

문제점)
- distinct 키워드가 중복 값을 찾아내는 원리는  데이터들을 우선 정렬을
  한 후 동일한 값이 있을 경우 1건만 남겨놓고 제거를 하여 출력하는 방식
- select 명령어 뒤에 여러개의 컬럼이 온다 치면 모든 컬럼을 다 distinct 키워드로
  중복값을 제거시 성능이 느린 sql문이 됨

========================================
round()함수
- 소수점을 제외하고 출력
========================================
WHERE절
- 원하는 조건만 검색
- 원하는 조건의 영문 이용시 대소문자 구분이 됨
* 문자 조건 지정시 주의 사항
1. 조회할 조건으로 숫자가 아닌 글자나 날짜를 사용할 경우 반드시 '', ""로 사용하여
   조건을 감싸야 한다.
2. 조회할 조건이 영어와 같이 대,소문자가 구분될 경우 반드시 대소문자를 정확하게
   구분해서 조건으로 적어줘야 한다.
   ex) HOBBY에 Climb이라 있을시 'climb'으로 작성하면 찾기 불가

형식)
SELECT [Column or Expression] FROM [Table] WHERE 원하는 조건;

========================================
다양한 연산자 활용하기
= : 비교 대상에서 같은 조건을 검색
!=, <> : 비교 대상에서 같지 않은 조건을 검색(NOT과 동일)
> : 비교 대상에서 큰 조건을 검색
>= : 비교 대상에서 크거나 같은 조건을 검색
< : 비교 대상에서 작은 조건을 검색
<= : 비교 대상에서 작거나 같은 조건을 검색
BETWEEN a AND b : a와 b사이에 있는 범위 값을 모두 검색
IN(a, b, c) : a이거나 b이거나 c인 조건을 검색
LIKE : 특정 패턴을 가지고 있는 조건을 검색
IS NULL : NULL 값을 검색
IS NOT NULL : NULL 값이 아닌 값을 검색
a AND b : a와 b조건을 모두 만족하는걸 검색
a OR b : a 조건이나 b 조건 중 한 가지라도 만족하는 값을 검색 

========================================
특정구간의 값을 추출
BETWEEN 연산자는 주어진 값 사이에 해당되는 데이터를 추출한다
성능상의 이슈로 BETWEEN 연산자보다는 >=, <= 연산자를 더 많이 사용함
ex) 위의 BETWEEEN 100 AND 200 과 deptno >= 100 AND deptno <= 200 동일

========================================
IN 연산자 : 여러 가지 조건을 한꺼번에 지정
- 여러가지 조건 중에서 해당되는 조건만을 추출할 때 가장 많이 사용되는 연산자
- IN 연산자는 or 연산자를 여러번 쓰는 것을 간략하게 사용할 수 있게 해준다

ex) 위의 deptno in(101, 102, 103) 과 deptno = 101 or deptno = 102 or deptno = 103 동일

========================================
LIKE 검색
- LIKE 검색은 매칭하기 위해 DBMS에 부담이 많으므로 
  LIKE에 OR과 같은 논리연산자를 중복해서 사용하지 말것
- NULL값은 조회 불가능
- %기호나 _기호를 맨 앞에 사용할 경우 데이터베이스에 인덱스라는 것을 사용할 수 없다

형식)
LIKE 'a%' : a로 시작하는 문자열 찾기
LIKE '%a' : a로 끝나는 문자열 찾기
LIKE '%a%' : a라는 문자가 포함된 문자열 모두 찾기

========================================
ORDER BY
- 정렬은 크게 오름차순과 내림차순 방식으로 구분
- ODER BY 컬럼 뒤에 ASC or DESC 미기입시 ASC가 디폴트 설정

형식) 
오름차순
SELECT Column FROM 테이블 WHERE Column 조건 ORDER BY Column ASC;
내림차순
SELECT Column FROM 테이블 WHERE Column 조건 ORDER BY Column DESC;

========================================
WHERE 절
- AND와 OR 연산자를 여러 개  사용할 수 있다
- 연산자 우선순위에 따라 ( )를 잘 섞어서 사용해 줘야한다
ex) 
1. WHERE (user_gender = '남자' or user_amount >= 5500) AND user_addr IS NULL
2. WHERE user_gender = '남자' or user_amount >= 5500 AND user_addr IS NULL

1번의 경우 gender or amount 중 하나를 충족하고 addr가 NULL인 결과
2번의 경우 gender or amount or adrr가 NULL인 결과

========================================
단일행 함수
- 테이블 데이터에 여러개(레코드)에 각각 적용되어 산출
- 문자함수, 숫자함수, 변환함수, 일반함수

그룹함수
- 여러개(레코드)를 동시에 입력받아 한개의 결과값 산출

========================================
LOWER()
- 영문자를 소문자로 변환하기
UPPER() 
- 영문자를 대문자로 변환하기

===================실습 코드=====================
DROP table emp; #기존에 있던 EMP를 날림

CREATE TABLE EMP (
EMPNO INT PRIMARY KEY,
NAME  VARCHAR(30) NOT NULL,
BIRTHDAY DATE,
DEPTNO CHAR(6) NOT NULL,
EMP_TYPE VARCHAR(30),
TEL VARCHAR(15),
HOBBY VARCHAR(30),
PAY INT,
POSITION VARCHAR(30),
PEMPNO INT
);

INSERT INTO EMP VALUES (19900101,'홍길동','1964-01-25','0001','Permanent employee','054)223-0001','music',100000000,'Boss',null);
INSERT INTO EMP VALUES (19960101,'홍길순','1973-03-22','1000','Permanent employee','02)6255-8000','reading',72000000,'Department head',19900101);
INSERT INTO EMP VALUES (19970201,'김길동','1975-04-15','1000','Permanent employee','02)6255-8005','Fitness',50000000,'Section head',19960101);
INSERT INTO EMP VALUES (19930331,'윤준형','1976-05-25','1001','Perment employee','02)6255-8010','bike',60000000,'Deputy department head',19960101);
INSERT INTO EMP VALUES (19950303,'김준형','1973-06-15','1002','Perment employee','02)6255-8020','Marathon',56000000,'Section head',19960101);
INSERT INTO EMP VALUES (19966102,'고길동','1972-07-05','1003','Perment employee','052)223-4000','Music',75000000,'Department head',19900101);
INSERT INTO EMP VALUES (19930402,'감자바','1972-08-15','1004','Perment employee','042)998-7005','Climb',51000000,'Section head',19966102);
INSERT INTO EMP VALUES (19960303,'김자바','1971-09-25','1005','Perment employee','031)564-3340','Climb',35000000,'Deputy Section chief',19966102);
INSERT INTO EMP VALUES (19970112,'고구마','1976-11-05','1006','Perment employee','054)223-4500','Swim',68000000,'Department head',19900101);
INSERT INTO EMP VALUES (19960212,'주먹밥','1972-12-15','1007','Perment employee','054)223-4600',null,49000000,'Section head',19970112);
INSERT INTO EMP VALUES (20000101,'이승혁','1985-01-25','1008','Contracted Worker','051)123-4567','Climb', 30000000,'',19960212);
INSERT INTO EMP VALUES (20000102,'고민재','1983-03-22','1009','Contracted Worker','031)234-5678','Fishing', 30000000,'',19960212);
INSERT INTO EMP VALUES (20000203,'고승현','1982-04-15','1010','Contracted Worker','02)2345-6789','Baduk', 30000000,'',19960212);
INSERT INTO EMP VALUES (20000334,'이승재','1981-05-25','1011','Contracted Worker','053)456-7890','Singing', 30000000,'',19960212);
INSERT INTO EMP VALUES (20000305,'이승원','1980-06-16','1008','Probation','051)567-8901','Reading book', 22000000,'',19960212);
INSERT INTO EMP VALUES (20006106,'이영길','1980-07-05','1009','Probation','031)678-9012','Driking',   22000000,'',19960212);
INSERT INTO EMP VALUES (20000407,'이준용','1980-08-15','1010','Probation','02)2789-0123','Computer game', 22000000,'',19960212);
INSERT INTO EMP VALUES (20000308,'장재봉','1980-09-25','1011','Intern','053)890-1234','Golf', 20000000,'',19960212);
INSERT INTO EMP VALUES (20000119,'장국환','1980-11-05','1004','Intern','042)901-2345','Drinking',   20000000,'',19930402);
INSERT INTO EMP VALUES (20000210,'나선욱','1980-12-15','1005','Intern','031)345-3456','Reading book', 20000000,'',19960303);

create table department( 
deptno int(3) primary key, /* 부서번호 */
dname varchar(50) not null, /* 부서이름 */
part int(3), 
build  varchar(30) /* 건물이름 */
);
insert into department 
values (101,'영업부',100,'Information Bldg');
insert into department
values (102,'개발부',100,'Multimedia Bldg');
insert into department
values (103,'총무부',100,'Software Bldg');
insert into department
values (201,'경리부',200,'Electronic Control Bldg');
insert into department
values (202,'생산1팀',200,'Machining Experiment Bldg');
insert into department
values (203,'생산2팀',200,'Chemical Experiment Bldg');
insert into department
values (301,'기술지원팀',300,'College of Liberal Arts');
insert into department
values (100,'상품관리부',10,null);
insert into department
values (200,'고객관리부',10,null);
insert into department
values (300,'품질관리부',20,null);
insert into department
values (10,'활동부',null,null);
insert into department
values (20,'인사팀',null,null);

/* decs - 해당 테이블에 있는 모든 Colum 상세 정보를 보는 명령어 */
Desc emp;

select name, 'is good~~' from emp;
/*
concat()함수
- 괄호 안에 있는 여러 단어나 텍스트를 1 개의 문장으로 합치는 역활
*/
select concat(name, ' is good~~') as 'good' from emp;

select * from emp;

# emp 테이블에서 사원이름, 현재급여, pay값의 1.1배를 해서 출력
select name, pay, pay * 1.1 as '인상금액' from emp;
# emp 테이블에서 사원이름, 현재급여, pay값의 1.1배를 해서 출력 소수점 미출력
select name, pay, round(pay * 1.1) as '인상금액' from emp;

/*
distinct => 중복된 값을 제거하고 출력
select 명령어 뒤에 distinct 키워드를 함께 사용하면 중복값이 제거되어 출력
* 반드시 select 구문 뒤에 맨 먼저 써야한다
* select 뒤에 있는 모든 컬럼에 영향력이 적용됨

문제점)
- distinct 키워드가 중복 값을 찾아내는 원리는  데이터들을 우선 정렬을
  한 후 동일한 값이 있을 경우 1건만 남겨놓고 제거를 하여 출력하는 방식
- select 명령어 뒤에 여러개의 컬럼이 온다 치면 모든 컬럼을 다 distinct 키워드로
  중복값을 제거시 성능이 느린 sql문이 됨
*/
select deptno from emp;
select distinct deptno from emp;

/*
WHERE절
- 원하는 조건만 검색
- 원하는 조건의 영문 이용시 대소문자 구분이 됨
* 문자 조건 지정시 주의 사항
1. 조회할 조건으로 숫자가 아닌 글자나 날짜를 사용할 경우 반드시 '', ""로 사용하여
   조건을 감싸야 한다.
2. 조회할 조건이 영어와 같이 대,소문자가 구분될 경우 반드시 대소문자를 정확하게
   구분해서 조건으로 적어줘야 한다.
   ex) HOBBY에 Climb이라 있을시 'climb'으로 작성하면 찾기 불가
형식)
SELECT [Column or Expression] FROM [Table] WHERE 원하는 조건;
*/
SELECT * FROM emp;
/* 
사원 정보가 있는 emp 테이블에서 이름(name), 부서번호(deptno), 취미(hobby)
정보를 출력하는데 부서번호가 1011 부서에 근무하는 사원들의 정보 출력
*/
SELECT name, deptno, hobby FROM emp WHERE deptno = '1011';

/* emp 테이블에서 취미(hobby)가 등산(Climb)인 직원들의 이름(name), 취미 값을 조회*/
# 그대로 출력
SELECT name, hobby FROM emp WHERE hobby = 'Climb';
# 별칭 추가 출력
SELECT name as '이름', hobby as '취미' FROM emp WHERE hobby = 'Climb';

select * from emp;

/*
다양한 연산자 활용하기
= : 비교 대상에서 같은 조건을 검색
!=, <> : 비교 대상에서 같지 않은 조건을 검색(NOT과 동일)
> : 비교 대상에서 큰 조건을 검색
>= : 비교 대상에서 크거나 같은 조건을 검색
< : 비교 대상에서 작은 조건을 검색
<= : 비교 대상에서 작거나 같은 조건을 검색
BETWEEN a AND b : a와 b사이에 있는 범위 값을 모두 검색
IN(a, b, c) : a이거나 b이거나 c인 조건을 검색
LIKE : 특정 패턴을 가지고 있는 조건을 검색
IS NULL : NULL 값을 검색
IS NOT NULL : NULL 값이 아닌 값을 검색
a AND b : a와 b조건을 모두 만족하는걸 검색
a OR b : a 조건이나 b 조건 중 한 가지라도 만족하는 값을 검색 
*/

SELECT * FROM emp; #입사일 확인을 위해 출력

/* emp 테이블에서 1975-10-23보다 이전 날짜만 
   추출한 후 name, birthday 값을 출력 */
SELECT name, birthday FROM emp WHERE birthday < '1975-10-23';

/* emp 테이블에서 부서번호(deptno)가 1011이 아닌 사원들의
   부서번호(deptno), 이름(name), 취미(hobby)를 출력 */
SELECT deptno, name, hobby FROM emp WHERE deptno != 1011;
SELECT deptno, name, hobby FROM emp WHERE deptno <> 1011;

/* emp 테이블에서 1975-10-23보다 이후 날짜만 
   추출한 후 name, birthday 값을 출력 */
SELECT name, birthday FROM emp WHERE birthday > '1975-10-23';

/*
특정구간의 값을 추출
BETWEEN 연산자는 주어진 값 사이에 해당되는 데이터를 추출한다
*/
SELECT * FROM department;
/* deptno가 100에서 200사이인 사원번호(deptno), 부서(dname), 건물(build)를 출력 */
SELECT deptno, dname, build FROM department 
WHERE deptno BETWEEN 100 AND 200;

/* 성능상의 이슈로 BETWEEN 연산자보다는 >=, <= 연산자를 더 많이 사용함 */
# 위의 BETWEEEN 100 AND 200 과 deptno >= 100 AND deptno <= 200 동일
SELECT deptno, dname, build FROM department
WHERE deptno >= 100 AND deptno <= 200;

/*
IN 연산자 : 여러 가지 조건을 한꺼번에 지정
- 여러가지 조건 중에서 해당되는 조건만을 추출할 때 가장 많이 사용되는 연산자
- IN 연산자는 or 연산자를 여러번 쓰는 것을 간략하게 사용할 수 있게 해준다
*/
SELECT deptno, dname FROM department
WHERE deptno in(101, 102, 103);
# 위의 deptno in(101, 102, 103) 과 deptno = 101 or deptno = 102 or deptno = 103 동일
SELECT deptno, dname FROM department
WHERE deptno = 101 or deptno = 102 or deptno = 103;

/* 
emp 테이블에서 이름이 첫 글자가 '홍'으로 시작하는 사원들의 이름과 급여를 추출
LIKE 검색
- LIKE 검색은 매칭하기 위해 DBMS에 부담이 많으므로 
  LIKE에 OR과 같은 논리연산자를 중복해서 사용하지 말것
- NULL값은 조회 불가능
- %기호나 _기호를 맨 앞에 사용할 경우 데이터베이스에 인덱스라는 것을 사용할 수 없다
형식)
LIKE 'a%' : a로 시작하는 문자열 찾기
LIKE '%a' : a로 끝나는 문자열 찾기
LIKE '%a%' : a라는 문자가 포함된 문자열 모두 찾기
*/
SELECT name, pay FROM emp WHERE name LIKE '홍%';

/*
IS NULL
IS NOT NULL
*/
/* department 테이블에서 build가 NULL인것 */
SELECT * FROM department WHERE build IS NULL;

/* NULL이 아닌것 */
SELECT * FROM department WHERE build IS NOT NULL;

/*
ORDER BY
- 정렬은 크게 오름차순과 내림차순 방식으로 구분
- ODER BY 컬럼 뒤에 ASC or DESC 미기입시 ASC가 디폴트 설정

형식) 
오름차순
SELECT Column FROM 테이블 WHERE Column 조건 ORDER BY Column ASC;
내림차순
SELECT Column FROM 테이블 WHERE Column 조건 ORDER BY Column DESC;
*/
/* 오름차순 정렬 */
SELECT deptno, name, birthday FROM emp 
WHERE deptno IN(1000, 1001, 1002, 1003) ORDER BY birthday;
SELECT deptno, name, birthday FROM emp 
WHERE deptno IN(1000, 1001, 1002, 1003) ORDER BY birthday ASC;

/* 내림차순 정렬 */
SELECT deptno, name, birthday FROM emp 
WHERE deptno IN(1000, 1001, 1002, 1003) ORDER BY birthday DESC;

CREATE TABLE user(
	user_num INT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(30),
    user_pw VARCHAR(200),
    user_mobile VARCHAR(200),
    user_gender VARCHAR(10),
    user_amount INT,
    user_addr VARCHAR(30)
    );
    
insert into user(user_id, user_pw, user_mobile, user_gender, 
user_amount, user_addr)
values('user1', 'aaaa', '01011111111', '남자', 5000, 'seoul');

insert into user(user_id, user_pw, user_mobile, user_gender, 
user_amount, user_addr)
values('user2', 'bbbb', '01022222222', '여자', 10000, NULL);

insert into user(user_id, user_pw, user_mobile, user_gender, 
user_amount, user_addr)
values('user3', 'cccc', '01033333333', '남자', 10000, 'busan');

insert into user(user_id, user_pw, user_mobile, user_gender, 
user_amount, user_addr)
values('user4', 'dddd', '01044444444', '여자', 5000, NULL);

insert into user(user_id, user_pw, user_mobile, user_gender, 
user_amount, user_addr)
values('user5', 'eeee', '01055555555', '남자', 5000, 'ulsan');

insert into user(user_id, user_pw, user_mobile, user_gender, 
user_amount, user_addr)
values('user6', 'ffff', '01066666666', '남자', 5500, 'incheon');

insert into user(user_id, user_pw, user_mobile, user_gender, 
user_amount, user_addr)
values('user7', 'gggg', '01077777777', '여자', 7000, 'daegu');

/*
user 테이블에서 성별이 남자이고 보유금액이 5500이상인 사람의 정보를 출력
*/

SELECT * FROM user 
WHERE user_gender = '남자' AND user_amount >= 5500;

/*
WHERE 절
- AND와 OR 연산자를 여러 개  사용할 수 있다
- 연산자 우선순위에 따라 ( )를 잘 섞어서 사용해 줘야한다
- MySQL의 WHERE 절에서 논리 연산자인 AND나 OR를 사용하는 경우
  AND 연산자 우선순위가 높기 때문에 무조건 AND를 나중에 써야한다.
*/
SELECT user_id, user_pw, user_mobile, user_gender, user_amount, user_addr
FROM user 
WHERE user_gender = '남자' OR user_amount >= 5500
AND user_addr IS NOT NULL;

SELECT user_id, user_mobile, user_gender, user_amount, user_addr
FROM user 
WHERE (user_gender = '남자' or user_amount >= 5500)
AND user_addr IS NULL;

/*
제약조건의 종류
NOT NULL : NULL값 입력 금지
UNIQUE : 중복값 입력 금지(NULL 값은 중복 입력 가능)
PRIMARY KEY : 유일키(NOT NULL + NUIQUE)
FOREIGN KEY : 해당 컬럼을 외래키로 지정(관계맺음)
CHECK : 조건으로 설정된 값만 입력 가능
*/

/* 
다음과 같이 테이블을 생성하면서 제약조건을 설정하세요
테이블 이름 :tbl_cons
컬럼명 : no, name, jumin, area, deptno
데이터 타입 : no(int), name(varchar(20)), jumin((varchar13)), 
			area(int), deptno(int)
제약조건 종류 : no(pk), name(not null), jumin(nuique), area(check)
기타사항 : area(1~4까지 숫자)
*/
CREATE TABLE tbl_cons(
	no INT PRIMARY KEY,
    name VARCHAR(20) NOT NULL,
    jumin VARCHAR(13) UNIQUE,
    area INT CHECK(area >= 1 AND area <= 4),
    deptno INT
    );
    
SELECT * FROM tbl_cons;

INSERT INTO tbl_cons(no, name, jumin, area, deptno)
VALUES(1, '홍길동', '9512011234567', '1', 10001);
INSERT INTO tbl_cons(no, name, jumin, area, deptno)
VALUES(2, '홍길동', '주민2', '1', 10001);
/*
INSERT INTO tbl_cons(no, name, jumin, area, deptno)
VALUES(1, '홍길동', '주민3', '5', 10001); #에러 뜸 area가 5가 입력되서 안됨
*/

/*
단일행 함수
- 테이블 데이터에 여러개(레코드)에 각각 적용되어 산출
- 문자함수, 숫자함수, 변환함수, 일반함수

그룹함수
- 여러개(레코드)를 동시에 입력받아 한개의 결과값 산출
*/
/* 
LOWER()
- 영문자를 소문자로 변환하기
UPPER() 
- 영문자를 대문자로 변환하기
*/
/* 소문자로 변환 */
SELECT name, LOWER(emp_type) as '소문자' FROM emp;
/* 대문자로 변환 */
SELECT name, UPPER(emp_type) as '대문자' FROM emp;
/* 소문자로 변환 */
SELECT name, LOWER(emp_type) as '소문자', UPPER(emp_type) as '대문자' FROM emp;